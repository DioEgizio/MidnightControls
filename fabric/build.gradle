plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'java-library'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name + "-fabric"

minecraft {
}

repositories {
    maven {
        name = 'CottonMC'
        url = 'http://server.bbkr.space:8081/artifactory/libs-snapshot'
    }
    repositories {
        maven { url = "https://jitpack.io" }
    }
    // OkZoomer
    ivy {
        url 'https://github.com/joaoh1/OkZoomer/releases/download/'
        patternLayout {
            artifact '[revision]/[module]-[revision].[ext]'
        }
        metadataSources() {
            artifact()
        }
    }
}

configurations {
    shadow
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompile "io.github.prospector:modmenu:${project.modmenu_version}"
    modCompile "com.github.lambdaurora:spruceui:${project.spruceui_version}"
    include "com.github.lambdaurora:spruceui:${project.spruceui_version}"

    // Compatibility mods
    modCompile "io.github.joaoh1:okzoomer:4.0.0-alpha.3.1.16.pre5"
    modCompile "me.shedaniel:RoughlyEnoughItems:4.5.5"

    api project(":core")
    shadow project(":core")
    include "org.jetbrains:annotations:17.0.0"
    include("org.aperlambda:lambdajcommon:1.8.0")  {
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }
    include "com.electronwill.night-config:core:3.5.3"
    include "com.electronwill.night-config:toml:3.5.3"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    from "../LICENSE"

    from {
        configurations.shadow.filter {
            it.getName().contains("lambdacontrols")
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

build.dependsOn(":core:build")
